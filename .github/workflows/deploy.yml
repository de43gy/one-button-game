name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GODOT_VERSION: "4.5.0-stable"
  GODOT_DOWNLOAD_URL: "https://github.com/godotengine/godot-builds/releases/download/4.5-dev6/Godot_v4.5-dev6_linux.x86_64.zip"
  GODOT_TEMPLATES_URL: "https://github.com/godotengine/godot-builds/releases/download/4.5-dev6/Godot_v4.5-dev6_export_templates.tpz"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and setup Godot
        run: |
          # Download Godot
          wget -q ${{ env.GODOT_DOWNLOAD_URL }} -O godot.zip
          unzip -q godot.zip
          chmod +x Godot_v4.5-dev6_linux.x86_64
          sudo mv Godot_v4.5-dev6_linux.x86_64 /usr/local/bin/godot

          # Download export templates
          wget -q ${{ env.GODOT_TEMPLATES_URL }} -O templates.tpz
          mkdir -p ~/.local/share/godot/export_templates/4.5.dev6
          unzip -q templates.tpz -d ~/.local/share/godot/export_templates/4.5.dev6
          mv ~/.local/share/godot/export_templates/4.5.dev6/templates/* ~/.local/share/godot/export_templates/4.5.dev6/

          # Verify installation
          godot --version

      - name: Export Godot project to HTML5
        run: |
          mkdir -p client_build
          godot --headless --export-release "Web" client_build/index.html

      - name: Verify export
        run: |
          ls -la client_build/
          echo "Export completed successfully"

      - name: Prepare deployment package
        run: |
          mkdir -p deploy_package
          cp -r backend deploy_package/
          cp -r nginx deploy_package/
          cp -r database deploy_package/
          cp -r client_build deploy_package/
          cp docker-compose.yml deploy_package/

      - name: Generate .env file
        run: |
          cat > deploy_package/.env << EOF
          # Database configuration
          DB_USER=${{ vars.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ vars.DB_NAME }}

          # Telegram configuration
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}

          # Server configuration
          SERVER_HOST=${{ vars.SERVER_HOST }}
          API_PORT=8000
          EOF

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Create deployment directory on VPS
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} \
            "mkdir -p /opt/one-button-game"

          # Copy files to VPS
          scp -i ~/.ssh/deploy_key -r deploy_package/* \
            ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }}:/opt/one-button-game/

          # Deploy with Docker Compose
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} << 'ENDSSH'
            cd /opt/one-button-game

            # Pull latest images and rebuild
            docker-compose pull
            docker-compose build --no-cache

            # Stop old containers and start new ones
            docker-compose down
            docker-compose up -d

            # Show status
            docker-compose ps

            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            sleep 10
            docker-compose ps
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} \
            "cd /opt/one-button-game && docker-compose logs --tail=50"

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/deploy_key
          rm -rf deploy_package
