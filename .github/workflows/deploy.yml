name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Export Godot Project to HTML5
        id: export
        uses: firebelley/godot-export@v5.2.1
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/4.5.1-stable/Godot_v4.5.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/4.5.1-stable/Godot_v4.5.1-stable_export_templates.tpz
          relative_project_path: ./
          use_preset_export_path: true
          use_godot_4: true

      - name: Verify export
        run: |
          echo "Export completed successfully"
          ls -la build/
          ls -la build/web/
          find build/ -type f

      - name: Prepare deployment package
        run: |
          mkdir -p deploy_package
          cp -r backend deploy_package/
          cp -r nginx deploy_package/
          cp -r database deploy_package/
          cp -r build/web deploy_package/client_build
          cp docker-compose.yml deploy_package/

      - name: Generate .env file
        run: |
          cat > deploy_package/.env << EOF
          # Database configuration
          DB_USER=${{ vars.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ vars.DB_NAME }}

          # Telegram configuration
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}

          # Server configuration
          SERVER_HOST=${{ vars.SERVER_HOST }}
          API_PORT=8000
          EOF

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          # Create deployment directory on VPS
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} \
            "mkdir -p /opt/one-button-game"

          # Copy files to VPS
          scp -i ~/.ssh/deploy_key -r deploy_package/* \
            ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }}:/opt/one-button-game/

          # Deploy with Docker Compose
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} << 'ENDSSH'
            cd /opt/one-button-game

            # Pull latest images and rebuild
            docker-compose pull
            docker-compose build --no-cache

            # Stop old containers and start new ones
            docker-compose down
            docker-compose up -d

            # Show status
            docker-compose ps

            # Wait for services to be healthy
            echo "Waiting for services to be healthy..."
            sleep 10
            docker-compose ps
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} \
            "cd /opt/one-button-game && docker-compose logs --tail=50"

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/deploy_key
          rm -rf deploy_package
