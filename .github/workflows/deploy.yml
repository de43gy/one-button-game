name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_CLIENT: ${{ github.repository }}-client

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Export Godot Project to HTML5
        uses: firebelley/godot-export@v7.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot/releases/download/4.5.1-stable/Godot_v4.5.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/4.5.1-stable/Godot_v4.5.1-stable_export_templates.tpz
          relative_project_path: ./
          use_preset_export_path: true
          presets_to_export: Web Export

      - name: Verify Godot export
        run: |
          echo "Godot export completed"
          ls -la build/web/
          find build/web/ -type f

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ vars.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Generate .env file
        run: |
          cat > .env << EOF
          # Database configuration
          DB_USER=${{ vars.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ vars.DB_NAME }}

          # Telegram configuration
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}

          # GitHub repository owner for image pulling
          GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
          EOF

      - name: Deploy to VPS
        run: |
          # Create deployment directory
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} \
            "mkdir -p ${{ vars.DEPLOY_PATH }}/database"

          # Copy docker-compose.yml and .env
          scp -i ~/.ssh/deploy_key docker-compose.yml \
            ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }}:${{ vars.DEPLOY_PATH }}/

          scp -i ~/.ssh/deploy_key .env \
            ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }}:${{ vars.DEPLOY_PATH }}/

          # Copy database init script
          scp -i ~/.ssh/deploy_key database/init.sql \
            ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }}:${{ vars.DEPLOY_PATH }}/database/

          # Deploy
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} << 'ENDSSH'
            cd ${{ vars.DEPLOY_PATH }}

            # Stop old containers
            docker-compose down

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Pull latest images
            docker-compose pull

            # Start services
            docker-compose up -d --remove-orphans

            # Show status
            docker-compose ps

            # Wait for health checks
            echo "Waiting for services to be healthy..."
            sleep 15
            docker-compose ps
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ vars.SSH_USER }}@${{ vars.SERVER_HOST }} \
            "cd ${{ vars.DEPLOY_PATH }} && docker-compose logs --tail=20"

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/deploy_key
          rm -f .env
